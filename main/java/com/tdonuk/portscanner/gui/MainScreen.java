/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tdonuk.portscanner.gui;

import com.tdonuk.portscanner.dto.Port;
import com.tdonuk.portscanner.dto.ScanRequest;
import com.tdonuk.portscanner.dto.ScanResult;
import com.tdonuk.portscanner.gui.dialog.ScanResultScreen;
import com.tdonuk.portscanner.util.CallableScanner;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.plaf.basic.BasicScrollBarUI;

/**
 *
 * @author Taha Donuk
 */
public class MainScreen extends javax.swing.JFrame {

    private ArrayList<Port> openPorts;

    private ScanRequest request;

    private Port port;

    private ExecutorService scannerWorkers;

    private Future<Boolean> result;

    private List<Future<Port>> futureList;

    public MainScreen() {
        initComponents();

        this.mainScroll.getVerticalScrollBar().setUnitIncrement(18);
        //this.mainScroll.getVerticalScrollBar().setPreferredSize(new Dimension(10, mainScroll.getVerticalScrollBar().getHeight()));
        this.mainScroll.getVerticalScrollBar().setBackground(Color.lightGray);

        this.mainScroll.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = Color.BLACK;
                this.scrollBarWidth = 6;

            }

            @Override
            protected JButton createDecreaseButton(int orientation) {
                return createZeroButton();
            }

            @Override
            protected JButton createIncreaseButton(int orientation) {
                return createZeroButton();
            }

            private JButton createZeroButton() {
                JButton jbutton = new JButton();
                jbutton.setPreferredSize(new Dimension(0, 0));
                jbutton.setMinimumSize(new Dimension(0, 0));
                jbutton.setMaximumSize(new Dimension(0, 0));
                return jbutton;
            }
        });

        proggressBar.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bodyPanel = new javax.swing.JPanel();
        headerLabel = new javax.swing.JLabel();
        copyrightLabel = new javax.swing.JLabel();
        versionLabel = new javax.swing.JLabel();
        bottomSeperator = new javax.swing.JSeparator();
        topSeperator = new javax.swing.JSeparator();
        innerBodyPanel = new javax.swing.JPanel();
        domainLabel = new javax.swing.JLabel();
        domainField = new javax.swing.JTextField();
        portRangeLabel = new javax.swing.JLabel();
        rangeStartField = new javax.swing.JTextField();
        rangeEndField = new javax.swing.JTextField();
        portRangeLabel1 = new javax.swing.JLabel();
        scanButton = new javax.swing.JButton();
        mainScroll = new javax.swing.JScrollPane();
        scrollPanel = new javax.swing.JPanel();
        exitButton = new javax.swing.JButton();
        maxThreadsLabel = new javax.swing.JLabel();
        threadsField = new javax.swing.JTextField();
        completingTimeLabel = new javax.swing.JLabel();
        counterLabel = new javax.swing.JLabel();
        estimatedTimeLabel = new javax.swing.JLabel();
        totalPortsLabel = new javax.swing.JLabel();
        proggressBar = new javax.swing.JProgressBar();
        infoLabel = new javax.swing.JLabel();
        percentLabel = new javax.swing.JLabel();
        menubar = new javax.swing.JMenuBar();
        Options = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Port Scanner");
        setFont(new java.awt.Font("Agency FB", 1, 24)); // NOI18N
        setMinimumSize(new java.awt.Dimension(400, 400));
        setName("MainScreen"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1200, 800));
        setSize(new java.awt.Dimension(1200, 800));

        headerLabel.setFont(new java.awt.Font("Agency FB", 1, 56)); // NOI18N
        headerLabel.setText("Port Scanner");

        copyrightLabel.setFont(new java.awt.Font("Agency FB", 0, 14)); // NOI18N
        copyrightLabel.setText("© 2021 Resul Taha Dönük");

        versionLabel.setFont(new java.awt.Font("Agency FB", 0, 14)); // NOI18N
        versionLabel.setText("v1.0");

        bottomSeperator.setForeground(new java.awt.Color(153, 153, 153));

        topSeperator.setForeground(new java.awt.Color(153, 153, 153));

        innerBodyPanel.setBackground(new java.awt.Color(250, 250, 250));

        domainLabel.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        domainLabel.setLabelFor(domainField);
        domainLabel.setText("Domain (or ip):");

        domainField.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        domainField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        domainField.setName("input"); // NOI18N
        domainField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                domainFieldKeyReleased(evt);
            }
        });

        portRangeLabel.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        portRangeLabel.setLabelFor(domainField);
        portRangeLabel.setText("Port Range (1 - 65535 by default):");

        rangeStartField.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        rangeStartField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rangeStartField.setName("input"); // NOI18N
        rangeStartField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rangeStartFieldKeyReleased(evt);
            }
        });

        rangeEndField.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        rangeEndField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rangeEndField.setName("input"); // NOI18N
        rangeEndField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rangeEndFieldKeyReleased(evt);
            }
        });

        portRangeLabel1.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        portRangeLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        portRangeLabel1.setLabelFor(domainField);
        portRangeLabel1.setText("-");

        scanButton.setBackground(new java.awt.Color(220, 220, 220));
        scanButton.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        scanButton.setText("Scan");
        scanButton.setEnabled(false);
        scanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanButtonActionPerformed(evt);
            }
        });

        mainScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Scan Results", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Agency FB", 1, 14))); // NOI18N
        mainScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        mainScroll.setViewportBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        mainScroll.setViewportView(scrollPanel);

        scrollPanel.setBackground(new java.awt.Color(255, 255, 255));
        scrollPanel.setLayout(new java.awt.GridBagLayout());
        mainScroll.setViewportView(scrollPanel);

        exitButton.setBackground(new java.awt.Color(220, 220, 220));
        exitButton.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        maxThreadsLabel.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        maxThreadsLabel.setLabelFor(domainField);
        maxThreadsLabel.setText("Maximum Threads (20 by default):");

        threadsField.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        threadsField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        threadsField.setName("input"); // NOI18N
        threadsField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                threadsFieldKeyReleased(evt);
            }
        });

        completingTimeLabel.setFont(new java.awt.Font("Agency FB", 0, 14)); // NOI18N

        counterLabel.setFont(new java.awt.Font("Agency FB", 0, 14)); // NOI18N

        estimatedTimeLabel.setFont(new java.awt.Font("Agency FB", 0, 14)); // NOI18N

        totalPortsLabel.setFont(new java.awt.Font("Agency FB", 0, 14)); // NOI18N

        javax.swing.GroupLayout innerBodyPanelLayout = new javax.swing.GroupLayout(innerBodyPanel);
        innerBodyPanel.setLayout(innerBodyPanelLayout);
        innerBodyPanelLayout.setHorizontalGroup(
            innerBodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(innerBodyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(innerBodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, innerBodyPanelLayout.createSequentialGroup()
                        .addComponent(completingTimeLabel)
                        .addGap(18, 18, 18)
                        .addComponent(counterLabel)
                        .addGap(18, 18, 18)
                        .addComponent(totalPortsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(estimatedTimeLabel)
                        .addGap(18, 18, 18)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(innerBodyPanelLayout.createSequentialGroup()
                        .addGroup(innerBodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mainScroll)
                            .addGroup(innerBodyPanelLayout.createSequentialGroup()
                                .addComponent(domainLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(domainField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 19, Short.MAX_VALUE)
                                .addComponent(portRangeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rangeStartField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(portRangeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(rangeEndField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 20, Short.MAX_VALUE)
                                .addComponent(maxThreadsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(threadsField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                                .addComponent(scanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        innerBodyPanelLayout.setVerticalGroup(
            innerBodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(innerBodyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(innerBodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(domainLabel)
                    .addComponent(domainField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portRangeLabel)
                    .addComponent(rangeStartField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rangeEndField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portRangeLabel1)
                    .addComponent(maxThreadsLabel)
                    .addComponent(threadsField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(innerBodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(innerBodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(completingTimeLabel)
                        .addComponent(counterLabel))
                    .addComponent(estimatedTimeLabel)
                    .addComponent(totalPortsLabel)))
        );

        proggressBar.setForeground(new java.awt.Color(0, 204, 0));
        proggressBar.setValue(20);

        infoLabel.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N

        percentLabel.setFont(new java.awt.Font("Agency FB", 0, 14)); // NOI18N

        javax.swing.GroupLayout bodyPanelLayout = new javax.swing.GroupLayout(bodyPanel);
        bodyPanel.setLayout(bodyPanelLayout);
        bodyPanelLayout.setHorizontalGroup(
            bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bodyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(innerBodyPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bottomSeperator)
                    .addComponent(topSeperator, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(bodyPanelLayout.createSequentialGroup()
                        .addComponent(headerLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(infoLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(percentLabel, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(bodyPanelLayout.createSequentialGroup()
                        .addComponent(copyrightLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(versionLabel)))
                .addContainerGap())
            .addComponent(proggressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        bodyPanelLayout.setVerticalGroup(
            bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bodyPanelLayout.createSequentialGroup()
                .addComponent(proggressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(bodyPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(headerLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bodyPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(percentLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(infoLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(topSeperator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(innerBodyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bottomSeperator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(versionLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(copyrightLabel))
                .addContainerGap())
        );

        Options.setText("Options");
        menubar.add(Options);

        setJMenuBar(menubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bodyPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bodyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(1);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void domainFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_domainFieldKeyReleased
        checkFields();
    }//GEN-LAST:event_domainFieldKeyReleased

    private void scanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanButtonActionPerformed
        Thread scanThread = new Thread(() -> {
            proggressBar.setVisible(true);

            Date scanStarted = new Date();

            String startAsString = rangeStartField.getText();
            String endAsString = rangeEndField.getText();
            String threadsAsString = threadsField.getText();

            int start = 1;
            if (!"".equals(startAsString)) {
                start = Integer.parseInt(startAsString);

                if (start < 1 || start > 65533) {
                    start = 1;
                }
            }

            int end = 65535;
            if (!"".equals(endAsString)) {
                end = Integer.parseInt(endAsString);

                if (end < 2 || end > 65535) {
                    end = 65535;
                }
            }

            if (start > end) {
                return;
            }

            int maxThreads = 20;
            if (!"".equals(threadsAsString)) {
                maxThreads = Integer.parseInt(threadsAsString);

                if (maxThreads < 1 || maxThreads > 60) {
                    maxThreads = 20;
                }
            }

            String domain = domainField.getText();

            request = new ScanRequest(domain, start, end, maxThreads);

            proggressBar.setMinimum(1);
            proggressBar.setMaximum(request.getEndRange() - request.getStartRange());
            infoLabel.setText("0/" + proggressBar.getMaximum());

            openPorts = new ArrayList();

            long prev = System.currentTimeMillis();
            this.startTime = prev;

            scannerWorkers = Executors.newFixedThreadPool(request.getMaxThreads());

            scrollPanel.removeAll(); // clear old search result

            futureList = new ArrayList();

            infoLabel.setText("pre-scan...");

            int index = 1;
            for (int i = request.getStartRange(); i <= request.getEndRange(); i++) {
                port = new Port(i);
                try {
                    futureList.add(scannerWorkers.submit(new CallableScanner(request, port)));
                    proggressBar.setValue(index);

                } catch (Exception ex) {
                    System.out.println("Exception");
                }
                index++;
            }

            scannerWorkers.shutdown();

            proggressBar.setValue(1);
            index = 1;
            try {
                Port p;
                for (final Future<Port> port : futureList) {
                    p = port.get();
                    if (port.isDone()) {
                        if (p.isOpen()) {
                            addCard(p);
                            openPorts.add(p);

                            counterLabel.setText("Open ports: " + openPorts.size());
                        }
                    }

                    showProggress(index);
                    index++;
                }
            } catch (InterruptedException ex) {
                Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ExecutionException ex) {
                Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
            }

            Date scanFinished = new Date();

            ScanResult scanResult = new ScanResult(openPorts, scanStarted, scanFinished, (request.getEndRange() - request.getStartRange() + 1), request.getMaxThreads(), request.getDomain());

            long after = System.currentTimeMillis();

            String time = "" + (after - prev) / 1000;

            Toolkit.getDefaultToolkit().beep();

            ScanResultScreen results = new ScanResultScreen(scanResult);
            results.setVisible(true);

            resetUI();
        });

        scanThread.start();
        enableInputs(false);
    }//GEN-LAST:event_scanButtonActionPerformed

    private void resetUI() {
        SwingUtilities.invokeLater(() -> {
            this.infoLabel.setText("Scan finished");
            this.estimatedTimeLabel.setText("");

            this.proggressBar.setVisible(false);
            this.proggressBar.setValue(1);

            this.cardIndex = 1;

            this.percentLabel.setText("");

            enableInputs(true);
        });
    }

    private int cardIndex = 1;
    GridBagConstraints gbc = new GridBagConstraints();

    synchronized private void addCard(Port port) {
        Card card;

        gbc.gridx = 0;
        gbc.insets = new Insets(0, 0, 0, 0);
        gbc.ipadx = 5;
        gbc.ipady = 5;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1;
        gbc.weighty = 1;

        card = new Card(port.getNumber(), "open", cardIndex);

        gbc.gridy = cardIndex;

        this.scrollPanel.add(card, gbc);

        SwingUtilities.invokeLater(() -> mainScroll.getVerticalScrollBar().setValue(mainScroll.getVerticalScrollBar().getMaximum()));

        cardIndex++;

    }

    private long startTime;

    synchronized private void showProggress(int portIndex) {

        Thread progressThread = new Thread(new Runnable() {
            @Override
            public void run() {
                proggressBar.setValue(proggressBar.getValue() + 1);
                infoLabel.setText(portIndex + "/" + (request.getEndRange() - request.getStartRange() + 1));

                totalPortsLabel.setText("Ports Scanned: " + portIndex);

                long now = System.currentTimeMillis();
                double timePassed = (now - startTime);

                float ratio = (float) portIndex / request.getEndRange();

                percentLabel.setText(String.format("%.1f", ratio * 100) + " %");

                /* Oran - Orantı */
                double estimatedTime = (timePassed / ratio) - timePassed;

                String timeText = "";
                String estimatedTimeText = "";

                if (timePassed / 1000 > 60) {
                    double temp = timePassed / 60000;
                    timeText = "Time Passed (Minutes): " + String.format("%.2f", temp);
                } else {
                    timeText = "Time Passed (Seconds): " + String.format("%.1f", timePassed / 1000);
                }

                if (estimatedTime / 1000 > 60) {
                    double temp = estimatedTime / 60000;
                    estimatedTimeText = "Estimated Time Remaining (Minutes): " + String.format("%.2f", temp);
                } else {
                    estimatedTimeText = "Estimated Time Remaining (Seconds): " + String.format("%.1f", estimatedTime / 1000);
                }

                completingTimeLabel.setText(timeText);
                estimatedTimeLabel.setText(estimatedTimeText);
            }
        });
        progressThread.start();
    }

    private void rangeStartFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rangeStartFieldKeyReleased
        checkFields();
    }//GEN-LAST:event_rangeStartFieldKeyReleased

    private void rangeEndFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rangeEndFieldKeyReleased
        checkFields();
    }//GEN-LAST:event_rangeEndFieldKeyReleased

    private void threadsFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_threadsFieldKeyReleased
        checkFields();
    }//GEN-LAST:event_threadsFieldKeyReleased

    private void enableInputs(boolean enable) {
        for (Component c : innerBodyPanel.getComponents()) {
            if (c instanceof JTextField || c == scanButton) {
                c.setEnabled(enable);
            }
        }
    }

    private void checkFields() {
        String domain = domainField.getText();
        String start = rangeStartField.getText();
        String end = rangeEndField.getText();
        String maxThreads = threadsField.getText();

        if (!"".equals(domain) && !domain.contains(" ") && domain.length() > 6 && !start.matches("[a-z]") && !end.matches("[a-z ]") && !maxThreads.matches("[a-z ]")) {
            scanButton.setEnabled(true);
        } else {
            scanButton.setEnabled(false);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Options;
    private javax.swing.JPanel bodyPanel;
    private javax.swing.JSeparator bottomSeperator;
    private javax.swing.JLabel completingTimeLabel;
    private javax.swing.JLabel copyrightLabel;
    private javax.swing.JLabel counterLabel;
    private javax.swing.JTextField domainField;
    private javax.swing.JLabel domainLabel;
    private javax.swing.JLabel estimatedTimeLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JPanel innerBodyPanel;
    private javax.swing.JScrollPane mainScroll;
    private javax.swing.JLabel maxThreadsLabel;
    private javax.swing.JMenuBar menubar;
    private javax.swing.JLabel percentLabel;
    private javax.swing.JLabel portRangeLabel;
    private javax.swing.JLabel portRangeLabel1;
    private javax.swing.JProgressBar proggressBar;
    private javax.swing.JTextField rangeEndField;
    private javax.swing.JTextField rangeStartField;
    private javax.swing.JButton scanButton;
    private javax.swing.JPanel scrollPanel;
    private javax.swing.JTextField threadsField;
    private javax.swing.JSeparator topSeperator;
    private javax.swing.JLabel totalPortsLabel;
    private javax.swing.JLabel versionLabel;
    // End of variables declaration//GEN-END:variables
}
